/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 05.11.2023 10:05:01

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1424;
#else
constexpr int kTensorArenaSize = 400;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,37 } };
const TfArray<1, float> quant0_scale = { 1, { 3.9307999610900879, } };
const TfArray<1, int> quant0_zero = { 1, { -127 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -14, 14, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0025438375305384398, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[2*20] = { 
  68, -102, 63, 94, 113, -81, -47, -101, 3, 83, -103, -103, -127, 107, -24, 50, 113, 60, 50, -76, 
  67, 20, -16, -15, -87, 6, -106, 52, -83, 35, -86, -43, 21, 87, 31, -23, -39, -93, 19, -106, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 2,20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0043684341944754124, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[20] = { -7, 15, -10, -9, -6, 10, -8, 14, -11, -9, 17, 14, 14, -9, 12, -17, -7, -12, -12, -10, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.002940313657745719, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[20*40] = { 
  34, -71, 88, 102, -13, 18, 53, 45, -8, -67, 79, 57, -107, 49, -61, 62, -103, 95, -30, 52, 50, -28, -4, 22, -11, -68, -17, -3, -9, -108, 64, -5, -31, -42, -68, -20, 92, 72, 42, -33, 
  -47, 79, 57, -36, -85, -39, 63, 71, -41, -42, 10, -82, 108, -61, -60, 105, -49, 29, -41, 74, 47, 4, -85, 77, 105, -92, -18, 24, 43, 75, 6, 73, 91, 101, 83, -93, 88, 27, -71, -14, 
  -28, -13, -54, -44, -55, 24, -35, -15, 69, -96, -61, -14, 107, -45, -14, 3, -41, 12, -32, -97, 80, 94, 86, -107, 91, -48, 81, 77, -72, 33, -103, 92, -30, 96, -104, -86, 17, 84, -38, -10, 
  56, 80, -66, -66, -36, 95, -73, -4, -36, 101, 97, -75, 31, 7, -11, 58, 40, 25, -83, 45, -69, 0, -87, 9, -89, 63, -59, -77, -50, -58, -62, 7, -86, -33, -38, -91, -43, -72, -108, -52, 
  -50, -100, -88, -42, -93, 82, -24, 19, -54, 69, -103, 76, -25, -29, 51, 28, -98, 48, -58, -5, -55, 101, -34, -28, 93, -55, 67, 23, -20, 17, -81, -97, -42, -87, 58, 100, -11, 100, 83, 53, 
  -77, -56, -21, 3, -99, 77, -40, -16, -24, -65, -98, 69, -31, 0, 26, -96, 15, 59, -76, 25, 88, -67, -94, -91, -39, 87, -34, 93, 61, 41, 119, -81, 55, 52, 71, -18, 52, 48, 56, -36, 
  81, -66, 69, 1, -31, 55, -72, 2, 48, -15, -20, -8, 62, -65, -115, -73, -28, 41, 3, 88, -30, -24, -46, 28, -80, 69, 82, -23, -112, -36, -5, -95, 25, 90, -57, 70, 17, -81, 34, 47, 
  -8, 60, -10, 98, 109, -48, 64, -95, 83, 13, 11, -50, 63, -29, -85, -43, 99, -82, 23, 94, 97, 64, -66, -75, 66, -102, -10, -92, 87, -64, 98, 100, -81, -54, 98, -45, -77, 44, -43, 26, 
  53, 43, 73, -113, -39, 85, -15, -43, -94, -45, 11, 22, 101, 48, 14, -61, 4, -113, 18, -93, -113, -38, 63, 58, 58, 22, -16, -14, -9, 19, 87, 23, -102, 22, 44, 94, 64, 5, -97, -55, 
  42, -15, 73, -19, 71, -57, -74, 50, -21, 3, 104, -93, 39, -53, 29, 51, -33, -88, -1, -32, 107, 3, -106, -20, -19, -6, 93, 14, -91, -99, 36, 77, -50, -109, -87, -113, 59, 37, -77, 21, 
  -68, 32, 26, -77, -26, 29, 127, -70, -7, 23, -73, 38, 33, 100, 63, 100, -62, -80, -1, -55, 33, -13, -91, 44, 92, -65, 121, -88, -30, 77, -53, 42, 56, 89, 32, 24, 26, -81, 41, -38, 
  -102, 79, -32, -77, 30, -37, 28, 85, 42, -29, -47, 63, 39, -56, -37, -9, -84, 0, 50, 14, 81, 53, 1, -46, 49, 52, -1, 43, 32, -71, 10, 63, 14, -2, 66, -13, -42, -48, 48, -85, 
  -85, 115, -47, 34, 8, 57, -64, -60, -78, -77, 81, -100, -34, 64, 83, 75, 58, 79, 22, 40, -69, 92, 56, -105, 28, -43, 123, 9, -16, 5, -86, 56, 14, 115, 47, 39, -56, -67, -55, -85, 
  6, -6, 69, -53, 67, 39, -93, -46, -55, 80, 80, -39, -86, 12, 51, 93, 72, -11, 69, -30, 7, -37, 53, 86, 9, 6, 19, 82, -103, 41, 76, -66, -68, -47, 86, -30, -11, -13, 28, 104, 
  64, -28, 68, 38, 59, 62, 48, -90, 97, 55, -7, -68, -73, 51, -68, 54, 22, 95, -82, 11, -44, 16, -94, 53, 12, -17, -9, 80, 41, -13, 30, 95, -63, 120, -58, 36, 28, -46, 79, -9, 
  64, 29, -125, 54, -64, 45, 46, -70, 42, 4, 65, -21, 39, -8, -80, 54, -121, 47, 32, 95, -49, -17, 79, -88, -34, -21, 53, -108, -32, 27, 55, -109, 60, 85, 1, -117, 55, 79, -63, -79, 
  40, -84, 68, -40, -2, 35, -42, -24, -25, -33, -38, -97, 30, 65, 71, 22, -59, -43, -19, -102, 101, 31, -11, 55, -114, -25, 61, -40, -99, 103, -62, -41, 84, 7, 13, 13, 32, 10, 0, -110, 
  82, 46, 79, -121, -32, 101, -29, 44, 1, 80, 53, -66, 89, 105, -49, -5, -76, -83, 95, -18, 59, -27, -71, -64, -48, -97, -83, -111, -34, 55, -61, 79, 13, -28, 6, 50, -100, -2, -88, 55, 
  33, 28, 23, -36, 3, 14, -109, 82, 58, -31, -103, 51, -85, -114, -54, 97, -1, -92, 102, 92, -55, -49, 23, 92, 71, 100, -108, 34, 73, 65, 84, 12, -111, 73, -9, -11, -24, 100, 74, 53, 
  -75, -13, 88, -1, -104, 40, -66, -25, 73, 74, -121, 2, -76, -6, -94, -83, -37, 91, -33, 42, 48, -112, 67, 96, -26, -39, 5, 66, -80, 82, -60, 68, 22, -20, -15, 53, 85, 94, -41, -26, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,40 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0028354788664728403, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[40] = { -2, 4, -3, 3, 4, -2, 3, -2, 2, 0, 2, -3, -1, -3, -2, 4, 4, 3, 0, 3, -1, 0, -1, -3, 1, -3, -1, -2, 3, -3, 2, 4, 2, 4, 2, -3, 0, -3, 0, -3, };
const TfArray<1, int> tensor_dimension5 = { 1, { 40 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0095930695533752441, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[40*37] = { 
  -8, -23, 25, 23, 28, -13, -108, -33, 19, -63, 88, 85, -112, -64, -87, 19, 60, -114, -78, -19, 42, -93, -106, -48, -81, -28, 36, -103, 98, 103, 34, 4, -26, -6, 87, 19, -77, 
  -99, 97, -23, 48, 61, -59, 28, 82, 101, 127, -7, 106, 70, -7, -14, -4, 111, 90, -77, 42, -34, 122, 77, 97, 21, -90, 18, -3, -95, 107, -8, -34, -16, 97, 74, 114, 79, 
  65, -76, 32, 58, 104, -99, -97, -81, 23, -12, 98, 49, -1, 95, -73, -72, 43, -35, -109, 51, 42, -119, 27, -73, 25, 44, -32, 46, -3, -2, 89, -31, -44, 9, -48, -20, -5, 
  -80, -60, 3, 1, 66, 105, 68, 62, -73, 50, -61, -60, 81, -68, 108, -36, 107, 82, 123, 34, -80, 15, 121, 9, 80, -61, -9, 39, -84, -32, 114, 119, -62, 78, -58, 78, -48, 
  94, -4, -65, 104, -53, -23, -60, -67, 75, 0, -3, -14, -26, 90, -93, 62, 112, -27, -28, 35, 22, -89, 71, 93, -11, 81, -79, -23, 83, 110, -86, 112, 15, -38, -101, -87, 87, 
  -40, 25, -43, 4, -48, -113, -118, 13, -109, -42, -95, -17, 76, 23, -61, -28, 80, 19, 70, 39, 71, -84, 13, -91, -11, 92, 30, 44, 31, 57, 23, 67, -38, -48, 91, 99, 71, 
  58, -64, -45, -32, -41, 5, 12, 55, -36, 120, -44, -42, -35, 121, 102, 87, 12, -79, -96, -81, -1, 1, -48, 119, 0, -66, -91, 45, 21, 73, -60, 89, 62, -92, -74, 30, -25, 
  81, 53, 78, 26, -35, -33, -50, -84, -46, -85, 84, -68, -34, -38, -116, 15, 14, -49, -26, 68, -30, 105, 32, 14, -77, -85, -27, -43, -108, 65, -86, 50, 52, 18, -61, -78, -29, 
  65, 45, -73, -8, -10, 17, 76, 29, 56, 121, 114, 110, 80, 88, 103, 74, -6, -84, -93, -65, -47, -93, -91, -30, -48, -96, 119, 65, 25, -1, 82, 104, 14, 107, 80, -38, 26, 
  -95, -96, -66, -103, -62, -97, -114, -72, -12, 80, -24, 22, 114, 6, -3, -50, -83, 80, 77, -16, 26, -62, -48, 73, 97, 58, -109, -68, 64, -103, -101, -79, 1, -107, -78, -71, 98, 
  105, 70, -90, 76, 5, -82, 32, 55, 0, 43, -95, -100, 96, -49, 83, -109, -89, 116, -26, -85, 46, 8, -33, 12, 68, -30, -15, 85, -71, 28, 33, 78, 35, -97, 55, 91, -19, 
  -28, 92, -97, 101, 73, 85, 60, -55, -59, 90, -37, 96, 23, 59, 102, -23, -8, 18, -91, 17, 37, 86, -71, 12, -110, -97, 21, 92, 45, 0, 74, -14, 68, 61, -35, -100, -76, 
  -56, 5, 65, -71, -88, -30, 24, -43, 11, 90, 49, -75, 53, 4, 91, -52, -114, 66, 88, -100, -17, -95, -117, 101, -21, 71, -117, -78, -81, -26, -41, -91, 14, 71, 6, -4, 48, 
  23, -40, 83, -100, -9, 11, 89, -33, -125, -102, -97, -16, -59, -85, -30, 22, -97, -27, 43, 81, 93, 82, 85, -17, 102, 28, -92, 94, 8, 45, -11, -28, 64, 81, 10, -107, 61, 
  104, -42, -12, -54, 54, 104, -104, -118, -106, 58, 89, -63, -113, -20, 83, 107, -58, -22, -93, 84, -120, -115, -22, -48, -117, -27, 34, -89, 95, 91, 1, -73, 11, 91, -26, 6, 98, 
  3, -73, -107, -4, 49, -1, -58, 59, 23, 45, -99, -87, 31, -43, -16, 35, -34, -1, 8, 36, 71, 39, 87, -97, -76, 54, 87, 52, 105, -77, 8, 27, 24, 23, 17, -92, 98, 
  3, -66, 109, -28, 47, -89, 38, -28, -79, 59, -84, 53, 58, -11, -69, 53, 99, -24, 41, -40, 11, 30, -3, 99, 3, 18, -12, -7, -6, 85, -62, -56, -70, 13, 8, -83, -49, 
  -10, 92, 93, -34, 46, -28, -28, -69, -67, 116, 72, -72, -49, -45, 4, -2, 17, 22, 120, 92, -95, 126, 46, 22, -74, -41, 117, 44, 97, -13, 46, 66, -12, -1, 48, 98, 84, 
  -96, 60, 55, -74, -3, -105, -97, -85, 7, -62, -57, -62, -49, -4, -101, 52, -72, 112, 32, -88, -83, -68, 3, 114, -90, 6, 51, 72, -74, -31, -36, -75, 56, 99, 6, 71, 86, 
  0, 16, -10, 45, 92, -85, 84, 4, 3, -54, -37, 96, -1, -67, 46, -73, 101, 15, -98, 13, -68, 36, 7, -100, -5, 35, -89, 59, 66, -70, -81, -77, -79, -11, -76, -103, -27, 
  -19, 97, 51, -76, -87, 37, -77, 96, 78, -58, -33, 17, 68, -59, -105, 31, -96, 45, 78, -76, -13, -38, 89, 95, -84, -108, -28, 68, 81, 63, -49, -83, -82, 33, -18, -99, -33, 
  -9, 10, 17, 32, 101, 45, 20, -61, 54, -69, -14, -23, 53, 81, -85, 106, 111, -34, -10, -52, -62, 79, -30, -78, -1, -16, -44, -115, 89, -92, 76, -21, 0, -113, -31, -64, -8, 
  -17, -78, -61, 93, -12, 16, 52, 76, 64, 46, -108, -91, -31, 53, -90, 72, -84, -39, -9, -88, 56, -21, -24, -93, -31, -28, -4, -95, 13, -33, -41, 17, 63, -66, -40, -112, 93, 
  51, 84, 54, 100, -101, 78, 57, -38, -66, 59, 33, -54, 45, 56, 61, 34, -63, 2, -119, 65, 56, 75, -98, -84, 40, -15, -124, -97, -123, -25, 27, 70, -112, -109, -115, -71, -91, 
  18, -89, -72, -32, 56, 17, -51, 60, 72, -29, 101, -22, 3, 73, -91, -73, -81, -56, -108, 64, 34, -42, -74, 67, 76, 79, -33, 105, 87, 66, -92, 102, 61, 112, -27, 32, 38, 
  84, 10, -108, 104, 20, -49, 44, -9, 25, 2, -101, -64, -37, -22, 104, -19, -77, -112, -71, 91, 35, -38, -117, -83, 63, -23, -51, 62, -22, 0, -115, -95, -7, 81, 43, -58, -89, 
  -35, -69, -115, 75, 3, -12, 63, -21, -62, 83, 17, 69, -14, -97, 26, -107, -16, 65, 44, 110, 22, 2, -100, -64, -27, 91, 66, -16, 89, -44, 8, -72, 26, 68, -64, 99, 50, 
  -120, 88, 30, 37, 86, 100, 35, -118, -69, 96, -81, -12, 99, 22, -25, 95, -108, -114, 22, -47, 23, 102, -19, -106, 47, -38, 9, -78, 70, -120, -45, -90, 22, -55, 106, 11, 37, 
  110, -41, 88, -60, -19, 78, -32, -39, -44, 32, 86, 55, 81, -3, -89, -97, 9, -23, 102, 21, -48, -34, 41, -5, 44, -103, -64, 62, 63, -32, -16, -37, -100, 91, -48, -24, -82, 
  47, 12, 52, -10, -116, -89, -42, 77, 55, -84, 60, 95, 65, 23, 39, -45, -16, 23, 76, 5, 35, 16, -124, 35, -101, 96, -117, 11, 0, 22, -74, 75, -37, -44, 35, 63, -8, 
  21, -123, -23, 23, 38, 36, -86, -64, 1, 26, 54, 90, -19, -35, 79, -88, -23, 101, -90, 34, -12, -34, 79, -105, 46, -69, -6, 100, -46, -15, 42, 78, -109, 53, 34, 15, -45, 
  29, -42, -83, -36, -24, 107, 106, 54, -39, 6, -22, 7, 48, 58, 47, -20, -42, -21, 31, 64, 86, -15, -35, 57, -7, 80, 42, 66, -17, -88, 64, -28, 71, -22, -22, 8, -65, 
  -101, -34, -92, -102, 62, -97, 68, 92, -30, -25, 71, 78, -28, -47, -23, 35, 110, 76, -68, -62, 25, -49, -36, 71, 120, -94, 27, -105, 42, 56, -74, 80, 36, 49, 85, -48, 81, 
  -102, -8, 120, 118, 38, 43, 44, -68, -5, -30, -77, -24, -101, 111, 22, -96, -96, 41, 5, -22, 68, -69, -43, 77, 81, 65, -42, -33, 91, -8, -27, -76, 99, 101, 119, -10, -10, 
  -88, 24, -64, 45, 43, -105, 119, -33, 22, -83, 118, 91, -58, -85, -23, -51, 81, -66, 35, -97, 101, 80, 76, -65, -40, 56, -14, -68, -16, -57, 54, 109, 112, 79, 69, -61, -39, 
  90, -91, 18, 8, 29, 30, 39, 74, 37, 54, 82, 37, -12, -53, -76, -53, 46, 12, -116, 87, -67, -94, -82, -41, 65, -22, 85, -76, 37, 82, -83, -61, 35, -80, 61, 80, 86, 
  -73, -8, -27, -82, -100, -36, 55, 41, -57, -37, -66, -48, -37, 87, 82, -1, -68, -60, -97, 4, -19, 83, -91, -104, -45, -14, -83, -108, -24, -79, 98, 7, 52, -43, 108, -23, 98, 
  41, 76, -42, 85, -24, 99, 69, -50, 17, -74, -60, 99, -100, 25, -77, -98, 16, 100, -72, -106, -45, -47, -86, 96, 44, -77, 49, -97, -111, -66, -100, 96, 49, -8, -43, -53, 93, 
  -29, -111, 10, -11, -40, -43, -80, -59, -67, 44, 94, 89, -99, -32, -79, -49, -102, 90, -77, -38, 23, 59, -18, 26, -105, -97, -65, -80, -72, 81, -59, 89, -59, -92, 100, 62, -52, 
  82, -50, -49, -25, 68, 79, -12, -57, -106, 20, -115, -100, -8, -57, 79, 6, -81, 30, 16, -25, -89, 53, -101, 20, -6, 42, 30, -67, -105, 84, 66, 31, -22, -87, -77, 65, -25, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 40,37 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0024404879659414291, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<1, float> quant7_scale = { 1, { 1.0369725227355957, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<1, float> quant8_scale = { 1, { 0.58232247829437256, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<1, float> quant9_scale = { 1, { 0.27866670489311218, } };
const TfArray<1, int> quant9_zero = { 1, { -109 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension0, 37, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
